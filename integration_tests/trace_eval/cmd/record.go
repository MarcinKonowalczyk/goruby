package main

import (
	"fmt"
	"os"
	"path"
	"strings"

	"github.com/MarcinKonowalczyk/goruby/integration_tests/utils"
)

const TEST_FILES_FOLDER = "test_files"

const HEADER = `# This file is automatically generated by '%s'.`

func main() {
	package_path := utils.ThisPackagePath()
	trimmed, err := utils.TrimPathSuffix(package_path, "trace_eval/cmd")
	if err != nil {
		fmt.Println("Error:", err)
		os.Exit(1)
	}

	test_files_folder := path.Join(trimmed, "trace_eval", TEST_FILES_FOLDER)
	if _, err := os.Stat(test_files_folder); os.IsNotExist(err) {
		fmt.Println("Test files folder does not exist:", test_files_folder)
		os.Exit(1)
	}

	grb, err := utils.InitGoRuby()
	if err != nil {
		fmt.Println("Error initializing GoRuby:", err)
		os.Exit(1)
	}

	test_files := utils.FindTestFiles(test_files_folder, ".rb")
	flags := []string{"--trace-eval=on-no-messages"}
	for _, test_file := range test_files {
		out, err := grb.RunFile(test_file, flags...)
		if err != nil {
			fmt.Println("Error running test file:", err)
			fmt.Println("Output:", out)
			os.Exit(1)
		}

		out = fmt.Sprintf(HEADER, "trace_eval/cmd/record.go") + "\n" + out

		out_file := strings.TrimSuffix(test_file, ".rb") + ".trace"
		// Save the output to a file
		if err := os.WriteFile(out_file, []byte(out), 0644); err != nil {
			fmt.Println("Error writing output to file:", err)
			os.Exit(1)
		}

	}
}

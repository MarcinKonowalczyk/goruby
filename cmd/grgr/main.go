package main

import (
	"flag"
	"fmt"
	"go/token"
	"log"
	"os"
	"strings"

	"github.com/MarcinKonowalczyk/goruby/ast"
	"github.com/MarcinKonowalczyk/goruby/interpreter"
	"github.com/MarcinKonowalczyk/goruby/parser"
	"github.com/MarcinKonowalczyk/goruby/transformer"
)

var (
	trace_transform bool = false
)

func main() {
	flag.Parse()
	args := flag.Args()
	interpreter := interpreter.NewInterpreterEx(args[1:])
	_ = interpreter
	if len(args) == 0 {
		log.Println("No program files specified")
		os.Exit(1)
	}
	fileBytes, err := os.ReadFile(args[0])
	if err != nil {
		log.Printf("Error while opening program file: %T:%v\n", err, err)
		os.Exit(1)
	}
	program, err := parser.ParseFile(token.NewFileSet(), args[0], fileBytes)

	if err != nil {
		log.Printf("Error while interpreting program file: %T:%v\n", err, err)
		os.Exit(1)
	}

	program, err = transformer.Transform(program, trace_transform)
	if err != nil {
		log.Printf("Error while transforming program file: %T:%v\n", err, err)
		os.Exit(1)
	}

	var g grgrOutput
	// print grgr header
	grgr_lines := `
	This file is autogenerated by grgr.
	Do not edit it manually.
	`
	g.PrintFakeComment(strings.Split(grgr_lines, "\n")...)
	g.Println()

	// print the AST
	g.PrintNode(program)

	str := g.out.String()
	fmt.Printf("%s", str)
}

type grgrOutput struct {
	out strings.Builder
}

func (g *grgrOutput) Println(args ...interface{}) {
	g.out.WriteString(fmt.Sprintln(args...))
}

func (g *grgrOutput) Printf(format string, args ...interface{}) {
	g.out.WriteString(fmt.Sprintf(format, args...))
}

func (g *grgrOutput) PrintNode(node ast.Node) {
	switch node := (node).(type) {
	case *ast.Program:
		for _, statement := range node.Statements {
			if statement == nil {
				continue
			}
			g.PrintNode(statement.(ast.Node))
		}
	case *ast.Comment:
		g.Println(node)
	case *ast.ExpressionStatement:
		g.PrintNode(node.Expression)
	case *ast.FunctionLiteral:
		g.PrintFakeComment(fmt.Sprintf(" %T", node))
		g.Println(node.Code())
		g.Println()
	case *ast.Assignment:
		g.PrintFakeComment(fmt.Sprintf(" %T", node))
		g.Println(node.Code())
		g.Println()

	case *ast.IndexExpression:
		g.PrintFakeComment(fmt.Sprintf(" %T", node))
		g.Println(node.Code())

	case *ast.ContextCallExpression:
		g.PrintFakeComment(fmt.Sprintf(" %T", node))
		g.Println(node.Code())
		g.Println()
	case *ast.IntegerLiteral:
		g.PrintFakeComment(fmt.Sprintf(" %T", node))
		g.Println(node.Code())
		g.Println()
	case *ast.ConditionalExpression:
		g.PrintFakeComment(fmt.Sprintf(" %T", node))
		g.Println(node.Code())
		g.Println()

	default:
		panic(fmt.Sprintf("GRGR print does not yet know how to print %T", node))
	}
}

func (g *grgrOutput) PrintFakeComment(content ...string) {
	if len(content) == 0 {
		return
	}
	for _, line := range content {
		comment_line := &ast.Comment{Value: "GRGR" + line}
		g.Println(comment_line)
	}
}
